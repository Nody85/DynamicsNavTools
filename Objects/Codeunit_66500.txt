OBJECT Codeunit 66500 Nav Stuff
{
  OBJECT-PROPERTIES
  {
    Date=07.08.18;
    Time=20:38:08;
    Modified=Yes;
    Version List=NAV STUFF;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Error001@1000000000 : TextConst 'DEU=Tabelle %1 EnthÑlt falsche Zeichen in Feld %2 definiert durch den SchlÅssel %3.;ENU=Table %1 contains illegal Signs in Field %2 defined by KeyValue %3.;DES=Tabelle %1 EnthÑlt falsche Zeichen in Feld %2 definiert durch den SchlÅssel %3.;DEA=Tabelle %1 EnthÑlt falsche Zeichen in Feld %2 definiert durch den SchlÅssel %3.';
      Error002@1000000001 : TextConst 'DEU=Der Datentyp der Table %1 Feld %2 stimmt nicht mit dem Datentyp der Quelltabelle %3 Feld %4 Åberein.;ENU=The Datatype from Table %1 Field %2 is not equal with Sourcetable %3 Field %4.;DES=Der Datentyp der Table %1 Feld %2 stimmt nicht mit dem Datentyp der Quelltabelle %3 Feld %4 Åberein.;DEA=Der Datentyp der Table %1 Feld %2 stimmt nicht mit dem Datentyp der Quelltabelle %3 Feld %4 Åberein.';
      Error003@1000000002 : TextConst 'DEU=Die FeldlÑnge der Table %1 Feld %2 stimmt nicht mit der FeldlÑnge der Quelltabelle %3 Feld %4 Åberein.;ENU=The Fieldlenght from Table %1 Field %2 is not equal with the Fieldlenght from Sourcetable %3 Field %4.;DES=Die FeldlÑnge der Table %1 Feld %2 stimmt nicht mit der FeldlÑnge der Quelltabelle %3 Feld %4 Åberein.;DEA=Die FeldlÑnge der Table %1 Feld %2 stimmt nicht mit der FeldlÑnge der Quelltabelle %3 Feld %4 Åberein.';
      Error004@1000000005 : TextConst 'DEU=Die TableRellation von Tabelle %1 Feld %2 zur Quelltabelle %3 Feld %4 ist ungÅltig.;ENU=The TableRelation from Table %1 Field %2 to SourceTable %3 Field %4 is invalide.;DES=Die TableRellation von Tabelle %1 Feld %2 zur Quelltabelle %3 Feld %4 ist ungÅltig.;DEA=Die TableRellation von Tabelle %1 Feld %2 zur Quelltabelle %3 Feld %4 ist ungÅltig.';
      CheckTableStart@1000000004 : TextConst 'DEU=Funktion CheckTable gestartet.;ENU=Function CheckTable started.;DES=Funktion CheckTable gestartet.;DEA=Funktion CheckTable gestartet.';
      CheckTableSuccess@1000000003 : TextConst 'DEU=Funktion CheckTable abgeschlossen.;ENU=Function CheckTable completed.;DES=Funktion CheckTable abgeschlossen.;DEA=Funktion CheckTable abgeschlossen.';
      CheckTableRelationStart@1000000007 : TextConst 'DEU=Funktion CheckTableRelations gestartet.;ENU=Function CheckTableRelations started.;DES=Funktion CheckTableRelations gestartet.;DEA=Funktion CheckTableRelations gestartet.';
      CheckTableRelationSuccess@1000000006 : TextConst 'DEU=Funktion CheckTableRelations abgeschlossen.;ENU=Function CheckTableRelations completed.;DES=Funktion CheckTableRelations abgeschlossen.;DEA=Funktion CheckTableRelations abgeschlossen.';

    LOCAL PROCEDURE InitLog@1000000001() : Boolean;
    VAR
      LogFile@1000000001 : File;
    BEGIN
      IF NOT FILE.EXISTS(BuildFullLogfilePath) THEN BEGIN
        LogFile.CREATE(BuildFullLogfilePath);
        LogFile.CLOSE;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE BuildFullLogfilePath@1000000003() : Text;
    VAR
      NAVStuffSetup@1000000000 : Record 66500;
    BEGIN
      IF NAVStuffSetup.GET THEN BEGIN
        NAVStuffSetup.TESTFIELD("Log File Path");
        EXIT(NAVStuffSetup."Log File Path" + '\' + BuildLogfileName);
      END;
    END;

    LOCAL PROCEDURE BuildLogfileName@1000000000() : Text;
    BEGIN
      EXIT(FORMAT(TODAY) + '.txt');
    END;

    PROCEDURE WriteLogFile@1000000002(LogMessage@1000000001 : Text);
    VAR
      Logfile@1000000000 : File;
    BEGIN
      IF InitLog THEN BEGIN
        Logfile.TEXTMODE(TRUE);
        Logfile.WRITEMODE(TRUE);
        Logfile.OPEN(BuildFullLogfilePath);
        Logfile.SEEK(Logfile.LEN);
        Logfile.WRITE(FORMAT(TODAY) + ' '+ FORMAT(TIME) + ': ' + LogMessage);
        Logfile.CLOSE;
      END;
    END;

    PROCEDURE CheckTable@1000000004(TableID@1000000002 : Integer;OnlyIndexing@1000000003 : Boolean);
    VAR
      Object@1000000000 : Record 2000000001;
      RecordReference@1000000001 : RecordRef;
    BEGIN
      WriteLogFile(CheckTableStart);

      Object.SETRANGE(Type,Object.Type::Table);
      IF TableID <> 0 THEN
        Object.SETRANGE(ID,TableID);
      IF Object.FINDSET THEN
        REPEAT
          IF TableIsNormal(Object.ID) THEN BEGIN
            RecordReference.OPEN(Object.ID);
            IF RecordReference.FINDSET THEN BEGIN
              REPEAT
                CheckFieldsFromRecord(RecordReference,OnlyIndexing);
              UNTIL RecordReference.NEXT = 0;
            END;
            RecordReference.CLOSE;
          END;
        UNTIL Object.NEXT = 0;

      WriteLogFile(CheckTableSuccess);
    END;

    LOCAL PROCEDURE CheckFieldsFromRecord@1000000007(RecordReference@1000000002 : RecordRef;OnlyIndexing@1000000003 : Boolean);
    VAR
      Field@1000000000 : Record 2000000041;
      FieldReference@1000000001 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo,RecordReference.NUMBER);
      Field.SETRANGE(Class,Field.Class::Normal);
      IF Field.FINDSET THEN
        REPEAT
          IF Field.Type IN [Field.Type::Code,Field.Type::Text] THEN BEGIN
            FieldReference := RecordReference.FIELD(Field."No.");
            IndexSigns(FORMAT(FieldReference.VALUE));
            IF NOT OnlyIndexing THEN BEGIN
              IF ContainsForbiddenSigns(FORMAT(FieldReference.VALUE)) THEN
                WriteLogFile(STRSUBSTNO(Error001,Field.TableNo,Field."No.",RecordReference.RECORDID));
            END;
          END;
        UNTIL Field.NEXT = 0;
    END;

    LOCAL PROCEDURE IndexSigns@1000000005(InputString@1000000000 : Text);
    VAR
      ForbiddenSigns@1000000001 : Record 66501;
      StringLenght@1000000002 : Integer;
      StringPosition@1000000003 : Integer;
    BEGIN
      FOR StringPosition := 1 TO STRLEN(InputString) DO BEGIN
        IF NOT ForbiddenSigns.GET(COPYSTR(InputString,StringPosition,1)) THEN BEGIN
          ForbiddenSigns.INIT;
          ForbiddenSigns.Sign := COPYSTR(InputString,StringPosition,1);
          ForbiddenSigns.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE ContainsForbiddenSigns@1000000006(InputString@1000000001 : Text) : Boolean;
    VAR
      ForbiddenSigns@1000000000 : Record 66501;
      StringPosition@1000000002 : Integer;
    BEGIN
      FOR StringPosition := 1 TO STRLEN(InputString) DO
        IF ForbiddenSigns.GET(COPYSTR(InputString,StringPosition,1)) AND ForbiddenSigns.Forbidden THEN
          EXIT(TRUE);
    END;

    PROCEDURE CheckTableRelation@1000000008(TableID@1000000000 : Integer) : Boolean;
    VAR
      TableRelationsMetadata@1000000001 : Record 2000000141;
    BEGIN
      WriteLogFile(CheckTableRelationStart);

      IF TableID <> 0 THEN
        TableRelationsMetadata.SETRANGE("Table ID",TableID);

      TableRelationsMetadata.SETRANGE("Validate Table Relation",TRUE);
      IF TableRelationsMetadata.FINDSET THEN
        REPEAT
          IF NOT CompareRelationFieldDataType(TableRelationsMetadata."Table ID",
                                              TableRelationsMetadata."Field No.",
                                              TableRelationsMetadata."Related Table ID",
                                              TableRelationsMetadata."Related Field No.")
          THEN
            WriteLogFile(STRSUBSTNO(Error002,
                                    TableRelationsMetadata."Table ID",
                                    TableRelationsMetadata."Field No.",
                                    TableRelationsMetadata."Related Table ID",
                                    TableRelationsMetadata."Related Field No."));
          IF NOT CompareRelationFieldLenght(TableRelationsMetadata."Table ID",
                                            TableRelationsMetadata."Field No.",
                                            TableRelationsMetadata."Related Table ID",
                                            TableRelationsMetadata."Related Field No.")
          THEN
            WriteLogFile(STRSUBSTNO(Error003,
                                    TableRelationsMetadata."Table ID",
                                    TableRelationsMetadata."Field No.",
                                    TableRelationsMetadata."Related Table ID",
                                    TableRelationsMetadata."Related Field No."));
        UNTIL TableRelationsMetadata.NEXT = 0;

      WriteLogFile(CheckTableRelationSuccess);
    END;

    LOCAL PROCEDURE CompareRelationFieldDataType@1000000009(TableID@1000000003 : Integer;FieldID@1000000002 : Integer;RelatedTableID@1000000001 : Integer;RelatedFieldNo@1000000000 : Integer) : Boolean;
    VAR
      Field@1000000004 : Record 2000000041;
      RelationField@1000000005 : Record 2000000041;
    BEGIN
      Field.GET(TableID,FieldID);
      IF NOT RelationField.GET(RelatedTableID,RelatedFieldNo) THEN BEGIN
        WriteLogFile(Error004);
        EXIT(FALSE);
      END;

      EXIT(Field.Type = RelationField.Type);
    END;

    LOCAL PROCEDURE CompareRelationFieldLenght@1000000010(TableID@1000000000 : Integer;FieldID@1000000001 : Integer;RelatedTableID@1000000002 : Integer;RelatedFieldNo@1000000003 : Integer) : Boolean;
    VAR
      Field@1000000005 : Record 2000000041;
      RelationField@1000000004 : Record 2000000041;
    BEGIN
      Field.GET(TableID,FieldID);
      IF NOT RelationField.GET(RelatedTableID,RelatedFieldNo) THEN BEGIN
        WriteLogFile(Error004);
        EXIT(FALSE);
      END;
      EXIT(Field.Len = RelationField.Len);
    END;

    LOCAL PROCEDURE TableIsNormal@1000000011(TableID@1000000001 : Integer) : Boolean;
    VAR
      TableMetadata@1000000000 : Record 2000000136;
    BEGIN
      TableMetadata.GET(TableID);

      IF TableMetadata.LinkedObject THEN
        EXIT(FALSE);

      EXIT(TableMetadata.TableType = TableMetadata.TableType::Normal);
    END;

    BEGIN
    {
      https://github.com/Nody85/DynamicsNavTools
    }
    END.
  }
}

